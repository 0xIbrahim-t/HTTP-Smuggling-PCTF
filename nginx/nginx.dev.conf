# Development configuration with debug logging
events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    
    # Enable debug logging for development
    error_log /dev/stdout debug;
    access_log /dev/stdout combined;
    
    # HTTP/2 Configuration
    http2_max_field_size 16k;
    http2_max_header_size 32k;
    
    # Caching Configuration
    proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;
    
    upstream frontend {
        server frontend:3000;
    }
    
    upstream backend {
        server backend:8000;
    }
    
    # HTTP redirect
    server {
        listen 80;
        server_name localhost;
        return 301 https://$server_name$request_uri;
    }
    
    # Main server block
    server {
        listen 443 ssl http2;
        server_name localhost;
        
        # SSL Configuration
        ssl_certificate /etc/nginx/cert/cert.pem;
        ssl_certificate_key /etc/nginx/cert/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        
        # Development headers for debugging
        add_header X-Debug-Cache-Key $request_method$request_uri$http_x_frontend_version always;
        add_header X-Debug-Cache-Status $upstream_cache_status always;
        
        # Frontend Location
        location / {
            proxy_pass http://frontend;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            
            # Enable caching for static content
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                proxy_cache my_cache;
                proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
                proxy_cache_valid 200 60m;
                add_header X-Cache-Status $upstream_cache_status;
            }
        }
        
        # Backend API Location - Intentionally vulnerable
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;  # Intentionally downgrade to HTTP/1.1
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            # Vulnerable: Allows Transfer-Encoding header to pass through
            proxy_pass_request_headers on;
            
            # Cache API responses - Part of the vulnerability
            proxy_cache my_cache;
            proxy_cache_key "$request_method$request_uri$http_x_frontend_version";
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            proxy_cache_valid 200 10m;
            add_header X-Cache-Status $upstream_cache_status always;
            
            # Don't cache authenticated requests except when specific header present
            proxy_cache_bypass $http_authorization;
            proxy_no_cache $http_authorization;
            proxy_cache_bypass $cookie_session;
            proxy_no_cache $cookie_session;
            
            # Development: Log headers for debugging
            add_header X-Debug-Request-Headers $http_transfer_encoding always;
        }
    }
}